
Code
300. Longest Increasing Subsequence
// binary search and monotonic array TC=O(nlogn) SC=O(n) better than dp and  
//Longest Increasing Subsequence is a pattern

class Solution {
    public int lengthOfLIS(int[] nums) {
        if(nums==null || nums.length==0)return 0;
        int n=nums.length;
        int arr[]=new int[n];
        arr[0]=nums[0];
        int le=1;
        for(int i=1;i<n;i++){
            if(nums[i]>arr[le-1]){ //when we have greater element we will add to arr
                arr[le]=nums[i];
                le++;
            }else{
                int bsIdx=binarySearch(arr,0,le-1,nums[i]);
                arr[bsIdx]=nums[i];
            }
        }
       
        return le;
    }

    private int binarySearch(int[] arr,int low,int high,int target){
        int mid=0;
        while(low<=high){
             mid=low+(high-low)/2;
            if(arr[mid]==target)return mid;
            if(arr[mid]>target){
                high=mid-1;
            }else{
                low=mid+1;
            }
        }
        return low;
    }
}



/*
// dp sloution TC=O(n^2) SC=O(n)
class Solution {
    public int lengthOfLIS(int[] nums) {
        if(nums==null || nums.length==0)return 0;
        int n=nums.length;
        int dp[]=new int[n];
        Arrays.fill(dp,1);
        int max=1;
        for(int i=1;i<n;i++){
            for(int j=0;j<i;j++){
                if(nums[j]<nums[i]){
                    dp[i]=Math.max(dp[i],dp[j]+1);
                    max=Math.max(max,dp[i]);
            }
            }
        }
        return max;
    }
}
 */

354. Russian Doll Envelopes

//Binary search solution TC=O(nlogn) and SC=O(n)

class Solution {
    public int maxEnvelopes(int[][] envelopes) {
        int n=envelopes.length;
        Arrays.sort(envelopes,(a,b)->{
            if(a[0]==b[0]){
                return b[1]-a[1];
            }
            return a[0]-b[0];
        });

        int[]arr=new int[n];
        arr[0]=envelopes[0][1];

        int le=1;
        for(int i=1;i<n;i++){
           
            if(envelopes[i][1]>arr[le-1]){
                arr[le]=envelopes[i][1];
                le++;
              
            }else{
                int bsIdx=binarySearch(arr,0,le,envelopes[i][1]);
                arr[bsIdx]=envelopes[i][1];
            }
        }
        return le;
    }
        private int binarySearch(int[] arr,int low,int high,int target){
        int mid=0;
        while(low<=high){
             mid=low+(high-low)/2;
            if(arr[mid]==target)return mid;
            if(arr[mid]>target){
                high=mid-1;
            }else{
                low=mid+1;
            }
        }
        return low;
    }
}

/*
//dp solution TC=O(n^2) as TC is so much so it will give us time limit exceed
//we have another approech where we are using binary search and TC=nlong
class Solution {
    public int maxEnvelopes(int[][] envelopes) {
        int n=envelopes.length;
        Arrays.sort(envelopes,(a,b)->{
            if(a[0]==b[0]){
                return b[1]-a[1];
            }
            return a[0]-b[0];
        });

        int[]dp=new int[n];
        Arrays.fill(dp,1);
        int result=1;
        for(int i=1;i<n;i++){
            for(int j=0;j<i;j++){
                if(envelopes[i][1]>envelopes[j][1]){
                    dp[i]=Math.max(dp[i],dp[j]+1);
                    result=Math.max(result,dp[i]);
                }
            }
        }
        return result;
    }
}
 */
